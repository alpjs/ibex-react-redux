{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;kBASwB;;;;;;;;;;;;;;;;;;;;AAJxB,IAAM,SAAS,+BAAkB,kBAAlB,CAAT;;AAEN,IAAI,iBAAJ;;;;;EAEe,SAAS,cAAT,OAAiE;QAAvC,mCAAuC;QAAxB,+BAAwB;QAAX,uBAAW;;AAC5E,WAAO,UAAC,GAAD,EAAS;AACZ,YAAI,OAAJ,CAAY,MAAZ;;;;+BAAqB,UAAU,aAAV,EAAyB,IAAzB,EAA+B;AAChD,mBAAO,KAAP,CAAa,aAAb,EAA4B,EAAE,UAAF,EAA5B,EADgD;;AAGhD,gBAAI,CAAC,cAAc,IAAd,EAAoB;AACrB,sBAAM,IAAI,KAAJ,CAAU,mCAAV,CAAN,CADqB;aAAzB;;AAIA,gBAAM,UAAU,cAAc,OAAd,IAAyB,cAAc,GAAd,CAPO;;AAShD,gBAAI,UAAU,SAAV,EAAqB;AACrB,oBAAI,cAAc,GAAd,EAAmB;AACnB,4BAAQ,wBAAY,OAAZ,EAAqB,WAArB,CAAR,CADmB;iBAAvB;aADJ,MAIO;;;;;AAEH,wBAAM,QAAQ,MAAM,QAAN,EAAR;AACN,2BAAO,IAAP,CAAY,KAAZ,EAAmB,OAAnB,CAA2B;+BAAO,OAAO,MAAM,GAAN,CAAP;qBAAP,CAA3B;AACA,2BAAO,MAAP,CAAc,KAAd,EAAqB,WAArB;;;AAGA,wBAAI,OAAJ,EAAa;AACT,8BAAM,cAAN,CAAqB,OAArB,EADS;qBAAb,MAEO;AACH,8BAAM,cAAN,CAAqB,UAAC,KAAD,EAAQ,MAAR;mCAAmB;yBAAnB,CAArB,CADG;qBAFP;qBAPG;aAJP;;AAkBA,gBAAI,OAAJ,EAAa;AACT,qBAAK,KAAL,GAAa,KAAb,CADS;aAAb;;AAIA,gCAAO;AACH,yBAAS,IAAT;AACA,sBAAM,cAAc,IAAd;AACN,0BAHG;AAIH,gCAJG;AAKH,wCALG;aAAP,EA/BgD;SAA/B,CADT;;AAyCZ,YAAM,UAAU,OAAO,MAAP,CAAc,IAAI,OAAJ,CAAxB,CAzCM;AA0CZ,YAAI,SAAS,UAAT,KAAwB,UAAxB,EAAoC;AACpC,mBAAO,KAAP,CAAa,kDAAb,EADoC;AAEpC,oBAAQ,MAAR,CAAe,aAAf,EAA8B,WAA9B,EAFoC;SAAxC,MAGO;AACH,mBAAO,KAAP,CAAa,wBAAb,EADG;AAEH,qBAAS,gBAAT,CAA0B,kBAA1B,EAA8C,YAAM;AAChD,uBAAO,KAAP,CAAa,0CAAb,EADgD;AAEhD,wBAAQ,MAAR,CAAe,aAAf,EAA8B,WAA9B,EAFgD;aAAN,CAA9C,CAFG;SAHP;KA1CG,CADqE;CAAjE","file":"index.js","sourcesContent":["import { ConsoleLogger } from 'nightingale';\nimport render from 'fody';\nimport App from 'fody-redux';\nimport { createStore } from 'redux';\n\nconst logger = new ConsoleLogger('ibex.react-redux');\n\nlet store;\n\nexport default function ibexReactRedux({ appDescriptor, initialData, element }) {\n    return (app) => {\n        app.context.render = function (appDescriptor, data) {\n            logger.debug('render view', { data });\n\n            if (!appDescriptor.View) {\n                throw new Error('View is undefined, class expected');\n            }\n\n            const reducer = appDescriptor.reducer || appDescriptor.app;\n\n            if (store === undefined) {\n                if (appDescriptor.app) {\n                    store = createStore(reducer, initialData);\n                }\n            } else {\n                // replace state\n                const state = store.getState();\n                Object.keys(state).forEach(key => delete state[key]);\n                Object.assign(state, initialData);\n\n                // replace reducer\n                if (reducer) {\n                    store.replaceReducer(reducer);\n                } else {\n                    store.replaceReducer((state, action) => state);\n                }\n            }\n\n            if (reducer) {\n                this.store = store;\n            }\n\n            render({\n                context: this,\n                View: appDescriptor.View,\n                data,\n                element,\n                App,\n            });\n        };\n\n        const context = Object.create(app.context);\n        if (document.readyState === 'complete') {\n            logger.debug('load react components, document is already ready');\n            context.render(appDescriptor, initialData);\n        } else {\n            logger.debug('waiting document ready');\n            document.addEventListener('DOMContentLoaded', () => {\n                logger.debug('load react components, document is ready');\n                context.render(appDescriptor, initialData);\n            });\n        }\n    };\n}\n"]}